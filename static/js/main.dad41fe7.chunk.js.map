{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Card","name","email","id","className","src","alt","style","margin","fontSize","CardList","robots","cardArray","map","user","index","SearchBox","searchChange","onChange","placeholder","type","padding","width","Scroll","props","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","display","flexDirection","justifyContent","alignItems","Component","ReactDOM","render","document","getElementById"],"mappings":";yRAceA,EAXF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WACzD,oBAAIC,MAAO,CAAEC,OAAQ,oBAArB,SAA4CP,IAC5C,mBAAGM,MAAO,CAAEE,SAAU,OAAtB,SAAgCP,QCY7BQ,G,MAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OACI,cAAC,EAAD,CAEIZ,GAAIQ,EAAOI,GAAOZ,GAClBF,KAAMU,EAAOI,GAAOd,KACpBC,MAAOS,EAAOI,GAAOb,OAHhBS,EAAOI,GAAOZ,OAO/B,OACI,qBAAKC,UAAU,WAAf,SACKQ,MCNEI,EATG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,uBAAOC,SAAUD,EACbE,YAAY,gBACZC,KAAK,SACLb,MAAO,CAAEc,QAAS,MAAOb,OAAQ,OAAQC,SAAU,OAAQa,MAAO,YCE/DC,EAPA,SAACC,GACZ,OACI,qBAAKjB,MAAO,CAAEkB,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKH,EAAMI,YCiEJC,E,kDA9DX,aAAe,IAAD,8BACV,gBAcJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAd1C,EAAKC,MAAQ,CAETzB,OAAQ,GACRsB,YAAa,IALP,E,qDASd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAErB,OAAQ8B,S,oBAS/C,WAAU,IAAD,OACCC,EAAiBC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAC,GAC5C,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAoBpE,OAAiC,IAA7BH,KAAKP,MAAMzB,OAAOqC,OACX,4CAIH,sBAAKzC,MAAO,CAAE0C,QAAS,OAAQC,cAAe,SAAUC,eAAgB,SAAUC,WAAY,UAA9F,UACI,sBAAK7C,MAAO,CAAE2C,cAAe,UAA7B,UACI,6CACA,cAAC,EAAD,CAAWjC,aAAc0B,KAAKb,oBAElC,cAAC,EAAD,UACI,cAAC,EAAD,CAAUnB,OAAQ+B,a,GAvDxBW,a,MCClBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dad41fe7.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./card.css\";\r\n\r\nconst Card = ({ name, email, id }) => {//puvodne bylo v zavorce props a nize const { name, email, id }; jde to ale takto jeste lip\r\n    //const { name, email, id } = props;//pokud toto nedam, tak u promennych bych musel psat props.name, props.id ...\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n            <h3 style={{ margin: \"20px 0px 2px 0px\" }}>{name}</h3>\r\n            <p style={{ fontSize: \"90%\" }}>{email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./CardList.css\"\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardArray = robots.map((user, index) => {\r\n        return (\r\n            <Card\r\n                key={robots[index].id}\r\n                id={robots[index].id}\r\n                name={robots[index].name}\r\n                email={robots[index].email}\r\n            />\r\n        );\r\n    })\r\n    return (\r\n        <div className=\"cardList\">\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <input onChange={searchChange}\r\n            placeholder=\"search robots\"\r\n            type=\"search\"\r\n            style={{ padding: \"5px\", margin: \"20px\", fontSize: \"15px\", width: \"200px\" }}\r\n        />\r\n    );\r\n}\r\nexport default SearchBox;","import React from \"react\";\r\n//toto je dulezity koncept Reactu - vedle STATE a PROPS jeste CHILDREN\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '2px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nexport default Scroll;","import React, { Component } from \"react\";//!!!\r\nimport CardList from '../components/CardList';\r\n// import { robots } from './robots'; toto v dalsi fazi nahrazujeme za https://jsonplaceholder.typicode.com/users, abychom jakoze stahovali z externiho serveru\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nclass App extends Component {//!!!pokud mam v kodu state, tak uz je to tzv. smart komponenta a musim pouzit class\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            //robots: robots,//toto by tu nemuselo byt, protoze ted pouzivam roboty ze souboru a nemeni se, ale vyhledove budou z databaze a ta se muze menit, jak se bude neco zadavat taky uzivatelem\r\n            robots: [], //kdyz chceme users fetchovat, tak dame tady prazdne pole misto robots a pouzijeme componentDidMount viz nize\r\n            searchfield: \"\"\r\n        }\r\n    }\r\n    //detaily jsou na netu pod Components Lifecycle Methods; tuto metodu pouzijeme pro natahovani dat z externiho serveru\r\n    componentDidMount() {//toto je jedna z component metod, stejne jako construktor nebo render, takze ani nevolame arrow funkci\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")//natahuju z externiho API; cele je to syntax, netreba nad tim dumat; fetch patri k window object\r\n            .then(response => response.json()) //puvodne byla syntaxe s return a {}, ale jde to i bez\r\n            .then(users => this.setState({ robots: users }));           //stahujeme usery misto robotu\r\n    }\r\n\r\n    onSearchChange = (event) => {// !!! puvodne tu mel onSearchChange(event), ale udajne musime takto, aby bylo jasne, k cemu se vztahuje this; pry je to obvykla chyba \r\n        this.setState({ searchfield: event.target.value });//!!! pozor na syntax!!! toto je taky pravidlo - musim nastavit state pomoci setState timto zpusobem\r\n\r\n    }\r\n    //abych nize nedaval tolikrat this.state, tak mohu pomoci destructuring:\r\n    //const {robots, searchfield} = this.state;\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n        //!!\r\n        //if-else nize by se dalo profi zlepsit:\r\n        //return !robots.length ?             -----> robots.length vraci false, pokud je === 0; tedy s ! vraci true a vraci loading; jinak nacita App\r\n        //<h1>Loading...</h1>\r\n        //:                                     \r\n        //(\r\n        // <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n        //         <div style={{ flexDirection: \"column\" }}>\r\n        //             <h1>RoboFriends</h1>\r\n        //             <SearchBox searchChange={this.onSearchChange} />\r\n        //         </div>\r\n        //         <Scroll>\r\n        //             <CardList robots={filteredRobots} />\r\n        //         </Scroll>\r\n\r\n        //     </div>\r\n        // );\r\n\r\n        if (this.state.robots.length === 0) {\r\n            return <h1>Loading...</h1>\r\n        }\r\n        else {\r\n            return (\r\n                <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                    <div style={{ flexDirection: \"column\" }}>\r\n                        <h1>RoboFriends</h1>\r\n                        <SearchBox searchChange={this.onSearchChange} />\r\n                    </div>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots} />\r\n                    </Scroll>\r\n\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"tachyons\";\nimport App from './containers/App';\nimport './containers/app.css';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}