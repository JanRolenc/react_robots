{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","style","margin","fontSize","CardList","robots","cardArray","map","user","index","SearchBox","searchChange","onChange","placeholder","type","padding","width","Scroll","props","overflow","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","display","flexDirection","justifyContent","alignItems","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83b3056d.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./card.css\";\r\n\r\nconst Card = ({ name, email, id }) => {//puvodne bylo v zavorce props a nize const { name, email, id }; jde to ale takto jeste lip\r\n    //const { name, email, id } = props;//pokud toto nedam, tak u promennych bych musel psat props.name, props.id ...\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n            <h3 style={{ margin: \"20px 0px 2px 0px\" }}>{name}</h3>\r\n            <p style={{ fontSize: \"90%\" }}>{email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./CardList.css\"\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardArray = robots.map((user, index) => {\r\n        return (\r\n            <Card\r\n                key={robots[index].id}\r\n                id={robots[index].id}\r\n                name={robots[index].name}\r\n                email={robots[index].email}\r\n            />\r\n        );\r\n    })\r\n    return (\r\n        <div className=\"cardList\">\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <input onChange={searchChange}\r\n            placeholder=\"search robots\"\r\n            type=\"search\"\r\n            style={{ padding: \"5px\", margin: \"20px\", fontSize: \"15px\", width: \"200px\" }}\r\n        />\r\n    );\r\n}\r\nexport default SearchBox;","import React from \"react\";\r\n//toto je dulezity koncept Reactu - vedle STATE a PROPS jeste CHILDREN\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '2px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from \"react\";//!!!\r\nimport CardList from '../components/CardList';\r\n// import { robots } from './robots'; toto v dalsi fazi nahrazujeme za https://jsonplaceholder.typicode.com/users, abychom jakoze stahovali z externiho serveru\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport { connect } from 'react-redux'\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {//!!!pokud mam v kodu state, tak uz je to tzv. smart komponenta a musim pouzit class\r\n    // constructor() {\r\n    //     super()\r\n    //     this.state = {\r\n    //         //robots: robots,//toto by tu nemuselo byt, protoze ted pouzivam roboty ze souboru a nemeni se, ale vyhledove budou z databaze a ta se muze menit, jak se bude neco zadavat taky uzivatelem\r\n    //         robots: [], //kdyz chceme users fetchovat, tak dame tady prazdne pole misto robots a pouzijeme componentDidMount viz nize\r\n    //         searchfield: \"\"\r\n    //     // po zavedeni reduxu construktor komplet zakomentujeme\r\n    //     }\r\n    // }\r\n    //detaily jsou na netu pod Components Lifecycle Methods; tuto metodu pouzijeme pro natahovani dat z externiho serveru\r\n    // componentDidMount() {//toto je jedna z component metod, stejne jako construktor nebo render, takze ani nevolame arrow funkci\r\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")//natahuju z externiho API; cele je to syntax, netreba nad tim dumat; fetch patri k window object\r\n    //     .then(response => response.json()) //puvodne byla syntaxe s return a {}, ale jde to i bez\r\n    //     .then(users => this.setState({ robots: users }));           //stahujeme usery misto robotu\r\n\r\n    // }\r\n    //po aplikaci redux:\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n    // onSearchChange = (event) => {// !!! puvodne tu mel onSearchChange(event), ale udajne musime takto, aby bylo jasne, k cemu se vztahuje this; pry je to obvykla chyba \r\n    //     this.setState({ searchfield: event.target.value });//!!! pozor na syntax!!! toto je taky pravidlo - musim nastavit state pomoci setState timto zpusobem\r\n\r\n    // } po zavedeni redux zakomentujeme\r\n\r\n\r\n    //abych nize nedaval tolikrat this.state, tak mohu pomoci destructuring:\r\n    //const {robots, searchfield} = this.state;\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props\r\n        const filteredRobots = robots.filter(robot => {\r\n            // return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return isPending ?\r\n            <h1>Loading...</h1> :\r\n            (\r\n                <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                    <div style={{ flexDirection: \"column\" }}>\r\n                        <h1>RoboFriends</h1>\r\n                        {/* <SearchBox searchChange={this.onSearchChange} /> */}\r\n                        {/* po redux mazeme this */}\r\n                        <SearchBox searchChange={onSearchChange} />\r\n                    </div>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots} />\r\n                    </Scroll>\r\n\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from \"./constants\" //toto je 'good practise' dat si type do zvlast souboru a jako const, aby se hlasil error, pokud treba misspell\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    // type: 'CHANGE_SEARCH_FIELD',//misto string dam promennou\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from \"./constants\" //toto je 'good practise' dat si type do zvlast souboru a jako const, aby se hlasil error, pokud treba misspell\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n                // return {...state, searchField: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}.state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"tachyons\";\nimport App from './containers/App';\nimport './containers/app.css';\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from \"redux-logger\"\nimport thunkMiddleware from \"redux-thunk\"\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n// const store = createStore(rootReducer)\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />,\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}